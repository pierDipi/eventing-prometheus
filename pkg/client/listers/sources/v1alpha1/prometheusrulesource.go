/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-prometheus/pkg/apis/sources/v1alpha1"
)

// PrometheusRuleSourceLister helps list PrometheusRuleSources.
// All objects returned here must be treated as read-only.
type PrometheusRuleSourceLister interface {
	// List lists all PrometheusRuleSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrometheusRuleSource, err error)
	// PrometheusRuleSources returns an object that can list and get PrometheusRuleSources.
	PrometheusRuleSources(namespace string) PrometheusRuleSourceNamespaceLister
	PrometheusRuleSourceListerExpansion
}

// prometheusRuleSourceLister implements the PrometheusRuleSourceLister interface.
type prometheusRuleSourceLister struct {
	indexer cache.Indexer
}

// NewPrometheusRuleSourceLister returns a new PrometheusRuleSourceLister.
func NewPrometheusRuleSourceLister(indexer cache.Indexer) PrometheusRuleSourceLister {
	return &prometheusRuleSourceLister{indexer: indexer}
}

// List lists all PrometheusRuleSources in the indexer.
func (s *prometheusRuleSourceLister) List(selector labels.Selector) (ret []*v1alpha1.PrometheusRuleSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrometheusRuleSource))
	})
	return ret, err
}

// PrometheusRuleSources returns an object that can list and get PrometheusRuleSources.
func (s *prometheusRuleSourceLister) PrometheusRuleSources(namespace string) PrometheusRuleSourceNamespaceLister {
	return prometheusRuleSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrometheusRuleSourceNamespaceLister helps list and get PrometheusRuleSources.
// All objects returned here must be treated as read-only.
type PrometheusRuleSourceNamespaceLister interface {
	// List lists all PrometheusRuleSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrometheusRuleSource, err error)
	// Get retrieves the PrometheusRuleSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrometheusRuleSource, error)
	PrometheusRuleSourceNamespaceListerExpansion
}

// prometheusRuleSourceNamespaceLister implements the PrometheusRuleSourceNamespaceLister
// interface.
type prometheusRuleSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrometheusRuleSources in the indexer for a given namespace.
func (s prometheusRuleSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrometheusRuleSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrometheusRuleSource))
	})
	return ret, err
}

// Get retrieves the PrometheusRuleSource from the indexer for a given namespace and name.
func (s prometheusRuleSourceNamespaceLister) Get(name string) (*v1alpha1.PrometheusRuleSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("prometheusrulesource"), name)
	}
	return obj.(*v1alpha1.PrometheusRuleSource), nil
}
